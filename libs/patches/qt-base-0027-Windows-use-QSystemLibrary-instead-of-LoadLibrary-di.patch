From 779e9e1e2ed43f7ce42b2a2373957379a84dcba9 Mon Sep 17 00:00:00 2001
From: Andy Shaw <andy.shaw@qt.io>
Date: Wed, 6 Apr 2022 16:56:14 +0200
Subject: Windows: use QSystemLibrary instead of LoadLibrary directly

Using QSystemLibrary ensures that it will only use the expected copy of
the system library and not one that has been placed in the application's
working directory or elsewhere in the PATH environment variable.

Pick-to: 5.15 6.2 6.3
Change-Id: Ic4234334f73482b38ee5f06345bf11f8c029edc5
Reviewed-by: Laszlo Agocs <laszlo.agocs@qt.io>
Reviewed-by: Thiago Macieira <thiago.macieira@intel.com>
Reviewed-by: Qt CI Bot <qt_ci_bot@qt-project.org>
---
 src/corelib/io/qlockfile_win.cpp                |  4 +++-
 src/network/kernel/qauthenticator.cpp           |  3 ++-
 .../platforms/windows/qwindowsglcontext.cpp     | 17 ++++++++++++-----
 .../platforms/windows/qwindowsopengltester.cpp  |  3 ++-
 4 files changed, 19 insertions(+), 8 deletions(-)

diff --git x/qtbase/src/corelib/io/qlockfile_win.cpp y/qtbase/src/corelib/io/qlockfile_win.cpp
index 277f8d4230..38ecef5550 100644
--- x/qtbase/src/corelib/io/qlockfile_win.cpp
+++ y/qtbase/src/corelib/io/qlockfile_win.cpp
@@ -48,6 +48,8 @@
 #include "QtCore/qdebug.h"
 #include "QtCore/qthread.h"
 
+#include "private/qsystemlibrary_p.h"
+
 QT_BEGIN_NAMESPACE
 
 static inline bool fileExists(const wchar_t *fileName)
@@ -150,7 +152,7 @@ QString QLockFilePrivate::processNameByPid(qint64 pid)
 #if !defined(Q_OS_WINRT)
     typedef DWORD (WINAPI *GetModuleFileNameExFunc)(HANDLE, HMODULE, LPTSTR, DWORD);
 
-    HMODULE hPsapi = LoadLibraryA("psapi");
+    HMODULE hPsapi = QSystemLibrary::load(L"psapi");
     if (!hPsapi)
         return QString();
     GetModuleFileNameExFunc qGetModuleFileNameEx = reinterpret_cast<GetModuleFileNameExFunc>(
diff --git x/qtbase/src/network/kernel/qauthenticator.cpp y/qtbase/src/network/kernel/qauthenticator.cpp
index 86242b011f..c317d1fe39 100644
--- x/qtbase/src/network/kernel/qauthenticator.cpp
+++ y/qtbase/src/network/kernel/qauthenticator.cpp
@@ -50,6 +50,7 @@
 #include <qstring.h>
 #include <qdatetime.h>
 #include <qrandom.h>
+#include "private/qsystemlibrary_p.h"
 
 #ifdef Q_OS_WIN
 #include <qmutex.h>
@@ -1542,7 +1543,7 @@ static bool q_SSPI_library_load()
 
     // Initialize security interface
     if (pSecurityFunctionTable == nullptr) {
-        securityDLLHandle = LoadLibrary(L"secur32.dll");
+        securityDLLHandle = QSystemLibrary::load(L"secur32");
         if (securityDLLHandle != nullptr) {
             INIT_SECURITY_INTERFACE pInitSecurityInterface =
                 reinterpret_cast<INIT_SECURITY_INTERFACE>(
diff --git x/qtbase/src/plugins/platforms/windows/qwindowsglcontext.cpp y/qtbase/src/plugins/platforms/windows/qwindowsglcontext.cpp
index 6fa5a8a2b3..1f49f0aefd 100644
--- x/qtbase/src/plugins/platforms/windows/qwindowsglcontext.cpp
+++ y/qtbase/src/plugins/platforms/windows/qwindowsglcontext.cpp
@@ -48,6 +48,7 @@
 #include <qpa/qplatformnativeinterface.h>
 #include <QtPlatformHeaders/qwglnativecontext.h>
 
+#include <private/qsystemlibrary_p.h>
 #include <algorithm>
 
 #include <wingdi.h>
@@ -162,19 +163,25 @@ QFunctionPointer QWindowsOpengl32DLL::resolve(const char *name)
 
 bool QWindowsOpengl32DLL::init(bool softwareRendering)
 {
-    const QByteArray opengl32 = QByteArrayLiteral("opengl32.dll");
-    const QByteArray swopengl = QByteArrayLiteral("opengl32sw.dll");
+    const QByteArray opengl32 = QByteArrayLiteral("opengl32");
+    const QByteArray swopengl = QByteArrayLiteral("opengl32sw");
+    bool useSystemLib = false;
 
     QByteArray openglDll = qgetenv("QT_OPENGL_DLL");
-    if (openglDll.isEmpty())
+    if (openglDll.isEmpty()) {
         openglDll = softwareRendering ? swopengl : opengl32;
+        useSystemLib = !softwareRendering;
+    }
 
     openglDll = openglDll.toLower();
     m_nonOpengl32 = openglDll != opengl32;
 
     qCDebug(lcQpaGl) << "Qt: Using WGL and OpenGL from" << openglDll;
 
-    m_lib = ::LoadLibraryA(openglDll.constData());
+    if (useSystemLib)
+        m_lib = QSystemLibrary::load((wchar_t*)(QString::fromLatin1(openglDll).utf16()));
+    else
+        m_lib = LoadLibraryA(openglDll.constData());
     if (!m_lib) {
         qErrnoWarning(::GetLastError(), "Failed to load %s", openglDll.constData());
         return false;
@@ -184,7 +191,7 @@ bool QWindowsOpengl32DLL::init(bool softwareRendering)
         // Load opengl32.dll always. GDI functions like ChoosePixelFormat do
         // GetModuleHandle for opengl32.dll and behave differently (and call back into
         // opengl32) when the module is present. This is fine for dummy contexts and windows.
-        ::LoadLibraryA("opengl32.dll");
+        QSystemLibrary::load(L"opengl32");
     }
 
     wglCreateContext = reinterpret_cast<HGLRC (WINAPI *)(HDC)>(resolve("wglCreateContext"));
diff --git x/qtbase/src/plugins/platforms/windows/qwindowsopengltester.cpp y/qtbase/src/plugins/platforms/windows/qwindowsopengltester.cpp
index d7d186e804..9eb4011bf2 100644
--- x/qtbase/src/plugins/platforms/windows/qwindowsopengltester.cpp
+++ y/qtbase/src/plugins/platforms/windows/qwindowsopengltester.cpp
@@ -49,6 +49,7 @@
 #include <QtCore/qstandardpaths.h>
 #include <QtCore/qlibraryinfo.h>
 #include <QtCore/qhash.h>
+#include <private/qsystemlibrary_p.h>
 
 #ifndef QT_NO_OPENGL
 #include <private/qopengl_p.h>
@@ -396,7 +397,7 @@ bool QWindowsOpenGLTester::testDesktopGL()
 
     // Test #1: Load opengl32.dll and try to resolve an OpenGL 2 function.
     // This will typically fail on systems that do not have a real OpenGL driver.
-    lib = LoadLibraryA("opengl32.dll");
+    lib = QSystemLibrary::load(L"opengl32");
     if (lib) {
         CreateContext = reinterpret_cast<CreateContextType>(
             reinterpret_cast<QFunctionPointer>(::GetProcAddress(lib, "wglCreateContext")));
-- 
2.35.1

